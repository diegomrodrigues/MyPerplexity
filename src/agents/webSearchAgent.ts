import { BaseMessage } from '@langchain/core/messages';
import {
  PromptTemplate,
  ChatPromptTemplate,
  MessagesPlaceholder,
} from '@langchain/core/prompts';
import {
  RunnableSequence,
  RunnableMap,
  RunnableLambda,
  RunnablePassthrough 
} from '@langchain/core/runnables';
import { StringOutputParser } from '@langchain/core/output_parsers';
import { Document } from '@langchain/core/documents';
import { searchSearxng } from '../lib/searxng';
import type { StreamEvent } from '@langchain/core/tracers/log_stream';
import type { BaseChatModel } from '@langchain/core/language_models/chat_models';
import type { Embeddings } from '@langchain/core/embeddings';
import formatChatHistoryAsString from '../utils/formatHistory';
import eventEmitter from 'events';
import computeSimilarity from '../utils/computeSimilarity';
import logger from '../utils/logger';

const basicSearchRetrieverPrompt = `
You will be given a conversation below and a follow up question. You need to rephrase the follow-up question if needed so it is a standalone question that can be used by the LLM to search the web for information.

Example:
1. Follow up question: What is the capital of France?
Rephrased: Capital of france

2. Follow up question: What is the population of New York City?
Rephrased: Population of New York City

3. Follow up question: What is Docker?
Rephrased: What is Docker

Conversation:
{chat_history}

Follow up question: {query}
Rephrased question:
`;

const basicWebSearchResponsePrompt = `
You are Perplexica, an AI model who is expert at searching the web and answering user's queries.

Generate a response that is informative and relevant to the user's query based on provided context (the context consits of search results containg a brief description of the content of that page).
You must use this context to answer the user's query in the best way possible. Use an unbaised and journalistic tone in your response. Do not repeat the text.
You must not tell the user to open any link or visit any website to get the answer. You must provide the answer in the response itself. If the user asks for links you can provide them.
Your responses should be long in length be informative and relevant to the user's query. You can use markdowns to format your response. You should use the template provided below in \`template\` section. Make sure the answer is not short and is informative.
You have to cite the answer using [number] notation. You must cite the sentences with their relevent context number. You must cite each and every part of the answer so the user can know where the information is coming from.
Place these citations at the end of that particular sentence. You can cite the same sentence multiple times if it is relevant to the user's query like [number1][number2].
However you do not need to cite it using the same number. You can use different numbers to cite the same sentence multiple times. The number refers to the number of the search result (passed in the context) used to generate that part of the answer.

Aything inside the following \`context\` HTML block provided below is for your knowledge returned by the search engine and is not shared by the user. You have to answer question on the basis of it and cite the relevant information from it but you do not have to 
talk about the context in your response. 

<context>
{context}
</context>

Anything between the \`context\` is retrieved from a search engine and is not a part of the conversation with the user. Today's date is ${new Date().toISOString()}

Now, use the template instructions below to format the response for the user using the search results above between the \`context\`. Please, keep it advanced, detailed, thorough, in-depth, and provide complete explanations.
`;

const templateWebSearchResponsePrompt = `
<template>
Crie um resumo avan√ßado, aprofundado e elaborado sobre X (m√≠nimo de 8 p√°ginas, extenso, n√£o poupe detalhes, aprofunde-se em conceitos t√©cnicos e matem√°ticos)

**X =** 

Utilize a formata√ß√£o abaixo como inspira√ß√£o para o resumo, mas fa√ßa as adapta√ß√µes necess√°rias com o objetivo de criar o melhor resumo poss√≠vel. Lembre-se de que o objetivo √© servir como um guia de estudo para um Cientista de Dados especialista em AI, Estat√≠stica e Deep Learning, com conhecimentos avan√ßados em tecnologia e programa√ß√£o.

Orienta√ß√µes para escrever o resumo:

**Organiza√ß√£o e Estrutura**: Garanta que cada se√ß√£o do resumo esteja bem organizada e siga uma l√≥gica clara. Utilize t√≠tulos e subt√≠tulos para facilitar a navega√ß√£o. Crie uma estrutura hier√°rquica coerente, com uma introdu√ß√£o, desenvolvimento e conclus√£o bem definidos.

**Detalhamento**: Aprofunde-se nos conceitos t√©cnicos e matem√°ticos, fornecendo explica√ß√µes detalhadas, exemplos pr√°ticos e demonstra√ß√µes passo a passo quando necess√°rio.

**Destaques**: Sempre que mencionar os conceitos principais no texto, utilize **negrito** para destac√°-los. Quando quiser inserir uma cita√ß√£o importante ou parafrasear algu√©m, utilize *it√°lico*. Utilize caixas de destaque, como notas, avisos e dicas, para enfatizar informa√ß√µes cruciais.

**Estilo e tom:** Escreva de forma acad√™mica e formal, mas use emojis quando necess√°rio para dar destaque a alguma informa√ß√£o, por exemplo, ao destacar um t√≥pico usando blockquotes. Utilize emojis como ‚ö†Ô∏è‚ùó‚úîÔ∏èüí° e outros que fa√ßam sentido dado o conte√∫do. Mantenha um tom instrutivo e explicativo ao longo do texto.

Template para o resumo:

## T√≠tulo do Resumo (seja breve)

Inicie com uma introdu√ß√£o concisa, por√©m abrangente, que contextualize a import√¢ncia do tema.

### Principais Conceitos

| Conceito       | Explica√ß√£o                                                   |
| -------------- | ------------------------------------------------------------ |
| **Conceito 1** | Forne√ßa uma explica√ß√£o concisa do conceito, explorando as bases te√≥ricas e suas aplica√ß√µes pr√°ticas. |
| **Conceito 2** | Forne√ßa uma explica√ß√£o concisa do conceito, explorando as bases te√≥ricas e suas aplica√ß√µes pr√°ticas. |

Utilize as formata√ß√µes abaixo como exemplo para destacar informa√ß√µes importantes e cr√≠ticas:

> ‚ö†Ô∏è **Nota Importante**: Use esta formata√ß√£o para destacar informa√ß√µes cr√≠ticas ou observa√ß√µes que n√£o podem ser ignoradas, assegurando que se destaquem no contexto do resumo.

> ‚ùó **Ponto de Aten√ß√£o**: Use esta formata√ß√£o para destacar informa√ß√µes cr√≠ticas ou observa√ß√µes que requerem maior aten√ß√£o ao implementar, pois colocam em risco o uso correto do conceito e devem ser levadas em conta pelo usu√°rio.

> ‚úîÔ∏è **Ponto de Destaque** (t√©cnicos e te√≥ricos): Use esta formata√ß√£o para destacar informa√ß√µes cr√≠ticas ou observa√ß√µes te√≥ricas ou t√©cnicas que impactam de forma positiva na compreens√£o do fen√¥meno, como resultados importantes que n√£o podem ser ignorados.

### [Explica√ß√£o de algum t√≥pico ou conceito]

Elabore de forma aprofundada sobre os t√≥picos e conceitos do tema X, de modo que o resumo seja avan√ßado, detalhado, bem escrito e cumpra os objetivos do texto. N√£o poupe detalhes!

Quando for contrastar, comparar, etc., informa√ß√µes, use a formata√ß√£o de lista de t√≥picos como no exemplo:

#### üëçVantagens

* Vantagem 1: explica√ß√£o detalhada e concisa do ponto de vantagem (exemplo)
* Vantagem 2: explica√ß√£o detalhada e concisa do ponto de vantagem (exemplo)

#### üëéDesvantagens

* Desvantagem 1: explica√ß√£o detalhada e concisa do ponto de desvantagem (exemplo)
* Desvantagem 2: explica√ß√£o detalhada e concisa do ponto de desvantagem (exemplo)

Ou de tabela, dependendo de qual melhor se ajustar ao conte√∫do:

| üëç Vantagens                                                  | üëé Desvantagens                                               |
| ------------------------------------------------------------ | ------------------------------------------------------------ |
| Explica√ß√£o detalhada e concisa do ponto de vantagem (exemplo) | Explica√ß√£o detalhada e concisa do ponto de desvantagem (exemplo) |
| Explica√ß√£o detalhada e concisa do ponto de vantagem (exemplo) | Explica√ß√£o detalhada e concisa do ponto de desvantagem (exemplo) |

Use esse exemplo apenas como inspira√ß√£o e utilize esses tipos de formata√ß√£o de acordo com a necessidade de elaborar sobre algum ponto t√≥pico do tema.

### [Explica√ß√£o de algum t√≥pico ou conceito te√≥rico]

Apresente defini√ß√µes matem√°ticas e te√≥ricas detalhadas, sem economizar em complexidade. Use a seguinte formata√ß√£o para equa√ß√µes importantes, garantindo que sejam facilmente leg√≠veis e centralizadas. Por exemplo:

O Teorema de Bayes √© um resultado fundamental na teoria da probabilidade que descreve como atualizar as probabilidades de uma hip√≥tese com base em novas evid√™ncias. Ele estabelece uma rela√ß√£o entre as probabilidades condicionais de dois eventos.

Seja $A$ e $B$ dois eventos, o Teorema de Bayes afirma que:

$$
P(A|B) = \fracP(B|A)P(A)P(B)
$$

onde:

- $P(A|B)$ √© a probabilidade condicional de $A$ dado $B$, tamb√©m conhecida como probabilidade a posteriori.
- $P(B|A)$ √© a probabilidade condicional de $B$ dado $A$, tamb√©m conhecida como verossimilhan√ßa.
- $P(A)$ √© a probabilidade a priori de $A$.
- $P(B)$ √© a probabilidade marginal de $B$, que atua como uma constante normalizadora.

A probabilidade marginal $P(B)$ pode ser calculada usando a lei da probabilidade total:

$$
P(B) = P(B|A)P(A) + P(B|\neg A)P(\neg A)
$$

onde $\neg A$ denota o evento complementar de $A$.

Prossiga com uma discuss√£o detalhada para explicar o funcionamento da equa√ß√£o e suas implica√ß√µes do conceito. Fa√ßa uma an√°lise de seu comportamento matem√°tico, se poss√≠vel. Por exemplo:

O Teorema de Bayes permite atualizar nossas cren√ßas (probabilidades) sobre uma hip√≥tese $A$ ap√≥s observar novas evid√™ncias $B$. Ele combina nossa cren√ßa pr√©via em $A$ (probabilidade a priori) com a probabilidade de observar $B$ dado que $A$ √© verdadeiro (verossimilhan√ßa) para obter nossa cren√ßa atualizada em $A$ dado $B$ (probabilidade a posteriori).

> ‚úîÔ∏è **Ponto de Destaque**: O Teorema de Bayes fornece uma estrutura matem√°tica para o racioc√≠nio probabil√≠stico e a atualiza√ß√£o de cren√ßas com base em novas informa√ß√µes. Ele √© amplamente aplicado em √°reas como aprendizado de m√°quina, estat√≠stica, ci√™ncia da computa√ß√£o e tomada de decis√£o.

### [Explica√ß√£o de algum t√≥pico ou conceito t√©cnico]

Coloque aqui informa√ß√µes relevantes e concisas para explicar a aplica√ß√£o do t√≥pico e como implement√°-lo. Mas somente quando realmente houver necessidade para responder a pergunta X e na linguagem apropriada, use a formata√ß√£o:

\`\`\`python
import lib # assuma que as depend√™ncias j√° est√£o instaladas

# Coment√°rio para elucidar apenas aspectos importantes
def minha_funcao(param):
	return lib.outra_funcao(param)
\`\`\`

Mantenha os snippets claros, concisos e o menor poss√≠vel, com foco na funcionalidade principal. N√£o adicione c√≥digos de setup como pip install, downloads, e exemplos b√°sicos, etc. Lembre-se que o resumo se destina √† um usu√°rio avan√ßado

### [Aplica√ß√µes|Trabalhos futuros|Extens√µes|etc]

Se houver necessidade de falar sobre aplica√ß√µes do conceito, trabalhos e pesquisas futuras, √°reas de interesse e extens√µes do conceito, use o seguinte formato:

| Conceito       | Explica√ß√£o                                                   |
| -------------- | ------------------------------------------------------------ |
| **Conceito 1** | Explica√ß√£o detalhada do conceito, incluindo exemplos pr√°ticos e aplica√ß√µes. |
| **Conceito 2** | Explica√ß√£o detalhada do conceito, incluindo exemplos pr√°ticos e aplica√ß√µes. |

### [T√≥picos Relacionados]

Para orientar o usu√°rio desse guia, crie uma lista de pr√≥ximos t√≥picos mais avan√ßados relacionados, mas somente quando houver necessidade:

- [ ] T√≥pico relacionado 1
- [ ] T√≥pico relacionado 2
- [ ] etc.

### Conclus√£o

Resuma todos os t√≥picos apresentados em uma conclus√£o sucinta e objetiva.

</template>

!!! N√£o adicione links ou uma se√ß√£o de refer√™ncias !!!
!!! Lembre-se de que esse template √© apenas um guia e voc√™ deve apenas se inspirar nele, sem a necessidade de replicar a mesma estrutura ao p√© da letra. Foque no objetivo !!!
!!! N√ÉO POUPE DETALHES, SEJA O MAIS APROFUNDADO POSS√çVEL !!!`;

const strParser = new StringOutputParser();

const handleStream = async (
  stream: AsyncGenerator<StreamEvent, any, unknown>,
  emitter: eventEmitter,
) => {
  for await (const event of stream) {
    if (
      event.event === 'on_chain_end' &&
      event.name === 'FinalSourceRetriever'
    ) {
      emitter.emit(
        'data',
        JSON.stringify({ type: 'sources', data: event.data.output }),
      );
    }
    if (
      event.event === 'on_chain_stream' &&
      event.name === 'FinalResponseGenerator'
    ) {
      emitter.emit(
        'data',
        JSON.stringify({ type: 'response', data: event.data.chunk }),
      );
    }
    if (
      event.event === 'on_chain_end' &&
      event.name === 'FinalResponseGenerator'
    ) {
      emitter.emit('end');
    }
  }
};

type BasicChainInput = {
  chat_history: BaseMessage[];
  query: string;
};

const createBasicWebSearchRetrieverChain = (llm: BaseChatModel) => {
  return RunnableLambda.from(async (input: string) => {
    const res = await searchSearxng(input, {
      language: 'en',
    });

    const documents = res.results.map(
      (result) =>
        new Document({
          pageContent: result.content,
          metadata: {
            title: result.title,
            url: result.url,
            ...(result.img_src && { img_src: result.img_src }),
          },
        }),
    );

    return { query: input, docs: documents };
  });
};

const createBasicWebSearchAnsweringChain = (
  llm: BaseChatModel,
  embeddings: Embeddings,
) => {
  const basicWebSearchRetrieverChain = createBasicWebSearchRetrieverChain(llm);

  const processDocs = async (docs: Document[]) => {
    return docs
      .map((_, index) => `${index + 1}. ${docs[index].pageContent}`)
      .join('\n');
  };

  const rerankDocs = async ({
    query,
    docs,
  }: {
    query: string;
    docs: Document[];
  }) => {
    if (docs.length === 0) {
      return docs;
    }

    const docsWithContent = docs.filter(
      (doc) => doc.pageContent && doc.pageContent.length > 0,
    );

    const [docEmbeddings, queryEmbedding] = await Promise.all([
      embeddings.embedDocuments(docsWithContent.map((doc) => doc.pageContent)),
      embeddings.embedQuery(query),
    ]);

    const similarity = docEmbeddings.map((docEmbedding, i) => {
      const sim = computeSimilarity(queryEmbedding, docEmbedding);

      return {
        index: i,
        similarity: sim,
      };
    });

    const sortedDocs = similarity
      .sort((a, b) => b.similarity - a.similarity)
      .filter((sim) => sim.similarity > 0.5)
      .slice(0, 15)
      .map((sim) => docsWithContent[sim.index]);

    return sortedDocs;
  };

  return RunnableSequence.from([
    RunnableMap.from({
      query: (input: BasicChainInput) => input.query,
      chat_history: (input: BasicChainInput) => input.chat_history,
      context: RunnableSequence.from([
        (input) => input.query,
        basicWebSearchRetrieverChain
          .pipe(rerankDocs)
          .withConfig({
            runName: 'FinalSourceRetriever',
          })
          .pipe(processDocs),
      ]),
    }),
    ChatPromptTemplate.fromMessages([
      ['system', `${basicWebSearchResponsePrompt} \n ${templateWebSearchResponsePrompt}`],
      new MessagesPlaceholder('chat_history'),
      ['user', '{query}'],
    ]),
    llm,
    strParser
  ]).withConfig({
    runName: 'FinalResponseGenerator',
  });
};

const basicWebSearch = (
  query: string,
  history: BaseMessage[],
  llm: BaseChatModel,
  embeddings: Embeddings,
) => {
  const emitter = new eventEmitter();

  try {
    const basicWebSearchAnsweringChain = createBasicWebSearchAnsweringChain(
      llm,
      embeddings
    );

    const stream = basicWebSearchAnsweringChain.streamEvents(
      {
        chat_history: history,
        query: query,
      },
      {
        version: 'v1',
      },
    );

    handleStream(stream, emitter);
  } catch (err) {
    emitter.emit(
      'error',
      JSON.stringify({ data: 'An error has occurred please try again later' }),
    );
    logger.error(`Error in websearch: ${err}`);
  }

  return emitter;
};

const handleWebSearch = (
  message: string,
  history: BaseMessage[],
  llm: BaseChatModel,
  embeddings: Embeddings,
) => {
  const emitter = basicWebSearch(message, history, llm, embeddings);
  return emitter;
};

export default handleWebSearch;
